#!/usr/bin/env python2

import argparse
import json_to_degree as js2deg
def query_yes_no(question, default="yes"):
    """Ask a yes/no question via raw_input() and return their answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is one of "yes" or "no".
    """
    valid = {"yes": True,   "y": True,  "ye": True,
             "no": False,     "n": False}
    if default == None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        _sys.stdout.write(question + prompt)
        choice = raw_input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            _sys.stdout.write("Please respond with 'yes' or 'no' "\
                             "(or 'y' or 'n').\n")


def json_to_dat(in_file, output=None, silent=False):
    """Takes in a valid json input and prints, either to the screen
    or to stdout, a valid input.dat file
    Args:   input : the filename of our .json input
            output : filename for output, None results in being put to stdout
            silent : If true, does not warn on file overwrite
    """
    import json

    # Open json config file and load the contents to a dictionary
    with open(in_file) as conf_file:
        try:
            config = json.load(conf_file)
        except ValueError as e:
            print "Json error, " + str(e) + " in {0}".format(conf_file.name)
            return

# Outputs config file (input.dat) to std out or to a file
    if output == None:
        print dict_to_dat(config)
    else:
        if not silent:
            # check to see if the file exists
            try:
                out_file = open(output)
                out_file.close()
                choice = query_yes_no("{0}".format(output) +
                       " already exists. Overwrite?", default="no")
                if not choice:
                    return
            except IOError:
                pass

        with open(output, 'w') as out_file:
            out_file.write(js2deg.dict_to_dat(config))

    return


def main():
  """
  Command-line tool for json_to_degree
  """
  # Parse commandline options
  parser = argparse.ArgumentParser(description='Convert json formatted ' +
          'config files to valid input.dat config files ' +
          'for the Hock melt model.')

  parser.add_argument('input', type=str,
          help='json equivalent of input.dat')
  parser.add_argument('-o', '--output', type=str,
          help='output filename, if unspecified output is sent to stdout')

  parser.add_argument('-s', '--silent', action="store_true",
          default=False,
          help='silently overwrite <output>, if it exists')

  args = parser.parse_args()

  js2deg.json_to_dat(args.input, args.output, args.silent)

if __name__=="__main__":
  main()
